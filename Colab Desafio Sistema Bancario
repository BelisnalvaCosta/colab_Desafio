Colab. Desafio de projeto - Sistema Bancarios
1 - Sistema_bancario.py
"""
Desafio - Sistema Bancário - DIO
"""


#Dicionário do MENU
menu = """
[d] Depositar
[s] Sacar
[e] Extrato
[q] Sair
====> Digite sua opção: """


# Declaração das variáveis e constantes
saldo = 2500
limite = 800
extrato=""
numero_saques = 3
LIMITE_SAQUES = 3
contador_saque=0
saques_acumulados = 0
contador_deposito=0
depositos_acumulados =0

while True:  # Laço infinito
    
    opcao = input(menu) # Faz a leitura do comando de entrada
    
    
    if opcao == "d":
        print("Depósito")
        deposito = float(input("Digite o valor que você deseja depositar?: "))
        if (deposito>0): # Verificar se o valor a ser depositado é positivo
            saldo= saldo+deposito
            contador_deposito +=1
            depositos_acumulados=depositos_acumulados+deposito
            extrato = extrato + f"\nDepósito nº{contador_deposito}: + R$ {deposito:.2f}" #f Faz a adição da string ao texto que irá aparecer no extrato
        else:   # Se o valor a ser depositado for negativo
            print("Valor de saque inválido. Tente novamente!")
        
        
    elif opcao == "s":
        print("Saque")
        saque = float((input("Quanto você deseja sacar?: ")))
        
        if (saldo<saque): # Verificar se há saldo
            print("Saldo insuficiente!")
        elif(saldo>saque): # Se tiver saldo, continue
            contador_saque +=1  # Contador de saque. O limite é de 3 saques no máximo
            if(saque>limite): # Se o saque for acima do limite diário de R$800,00
                print(f"Saque acima de R$ {limite:.2f} não permitido")
            elif(saque<limite): # Se for menor que o limite diário, continue
                if(contador_saque>numero_saques): # Verifica se atingiu a quantidade máximo de saques diários.
                    print("\nExcedeu o limite de saques diário! Não é possível realizar mais de 3 saques ao dia!")
                else:
                    print("\nSaque realizado com sucesso!")
                    saques_acumulados = saques_acumulados+saque
                    extrato = extrato + f"\nSaque nº{contador_saque}: - R$ {saque:.2f}" # Faz a adição da string ao texto que irá aparecer no extrato
                    saldo = saldo-saque
        
        
    elif opcao == "e":
        print("*************** Extrato ***************") # Exibe o extrato completo com os saques e depósitos.
        extrato = extrato + f"""\n 
\n Valor total de saques:    - R$ {saques_acumulados:.2f}
\n Valor total de depositos: + R$ {depositos_acumulados:.2f}
\n ______________________________________________________    
        
   Seu saldo é de:             R$ {saldo:6.2f}"""
        
        print(extrato)
        
        
    elif opcao == "q":
        print("\n\nEncerrando...\n O Banco " " agradece a sua preferência!\n\n")
        break
    else:
        print("Operação Inválida! Por favor selecione novamente a operação desejada")
*****************************************************************************

2-Sistema_bancario_2py
"""
Desafio - Sistema Bancário - DIO
Versão 2:
- Modularização
    - Utilização de funções
- Novas funcionalidades
"""


# Dicionário do MENU
menu = """
[d] Depositar
[s] Sacar
[n] Novo Usuário
[c] Nova Conta
[lc] Lista Contas
[e] Extrato
[q] Sair
====> Digite sua opção: """


# Declaração das variáveis e constantes
saldo = 2500
limite = 800
extrato=""
numero_saques = 0
LIMITE_SAQUES = 3
contador_saque=0
saques_acumulados = 0
contador_deposito=0
depositos_acumulados =0
lista_usuarios=[]
nro_conta=0
contas=[]
AGENCIA = "0001"


def sacar(*,saldo,valor,extrato,limite,numero_saques,limite_saques):
    if (saldo<valor): # Verifica se existe saldo
        print("Saldo insuficiente!")
    elif(saldo>valor): # Caso haja saldo, continue
        numero_saques+=1  # Contador de saque. O limite é de 3 saques
        if(valor>limite): # Se o saque for acima do limite diário de R$800,00
            print(f"Saque acima de R$ {limite:.2f} não permitido")
        elif(valor<limite): # Se for menor que o limite diário, continue
            if(numero_saques>limite_saques): # Verifica se atingiu a quantidade máxima de saques diários.
                print("\nExcedeu o limite de saques diário! Não é possível realizar mais de 3 saques ao dia!")
            else:
                
                global saques_acumulados
                saques_acumulados +=valor
                print(f"\nSaque de R${valor:.2f} realizado com sucesso!")
                extrato = extrato + f"\nSaque nº{numero_saques}: - R$ {valor:.2f}" # Faz a adição da string ao texto que irá aparecer no extrato

                saldo = saldo-valor
                
    return saldo,extrato

def depositar(saldo,valor,extrato,/):
    saldo= saldo+valor
    global contador_deposito
    contador_deposito+=1
    extrato = extrato + f"\nDepósito nº{contador_deposito}: + R$ {valor:.2f}" # Faz a adição da string ao texto que irá aparecer no extrato   
    print(f"\nDepósito de R$ {valor:.2f} realizado com sucesso!") 
    
    return saldo,extrato

def print_extrato(saldo,/,*,extrato):
    
    print("\n*************** Extrato ***************") # Exibe o extrato completo com os saques e depósitos.
    extrato = extrato + f"""\n 
\n Valor total de saques:    - R$ {saques_acumulados:.2f}
\n Valor total de depositos: + R$ {depositos_acumulados:.2f}
\n __________________________________________________________        
        
   Seu saldo é de:             R$ {saldo:6.2f}"""
        
    print(extrato)
    return extrato

def criar_usuario(usuarios): # Nome="",data_nascimento="DD/MM/AAAA",cpf=1234567890,endereco="logradouro, nro - bairro - cidade/sigla estado"
    # Data de nascimento no formato: DD/MM/AAAA
    # Endereço no formato: logradouro, numero - bairro - cidade/sigla estado
    cpf =input("Informe o CPF (somente números): ")
    usuario = filtrar_usuario(cpf,usuarios)
    if usuario:
        print("CPF já cadastrado! Usuário existente!")     
        return
    
    nome = input("Infome o nome complete do usuário: ")
    data_nascimento = input("Infome a data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe o endereço (logradouro, nro - barro - cidade/sigla estado): ")
    
    usuarios.append({"nome": nome, "data_nascimento":data_nascimento, "cpf":cpf, "endereco": endereco})
    print("Usuario criado com sucesso!")

def criar_conta(agencia,nro_conta,usuarios):
    
    cpf = input("Informe o CPF do usuário: ")
    usuario = filtrar_usuario(cpf,usuarios)
    
    if usuario:
        print("Conta criada com sucesso!")
        return {"agencia":agencia,"numero_conta": nro_conta,"usuario":usuario}
    
    print("Usuário Não encontrado! Fluxo de Criação de conta encerrado!")


def filtrar_usuario(cpf,usuarios):
    usuarios_filtrados = [usuario for usuario in usuarios if usuario["cpf"]==cpf]
    return usuarios_filtrados[0] if usuarios_filtrados else None
    

def listar_contas(contas):
    for conta in contas:
        linha = f"""
            Agência: \t {conta['agencia']}
            C/C:\t{conta['nro_conta']}
            Titular: \t{conta['usuario']['nome']}
           
        """
        print("="*100)
        print(linha)

    




while True:  # Laço infinito
    
    opcao = input(menu) # Faz a leitura do comando de entrada
    
    
    if opcao == "d":
        print("Depósito")
        deposito = float(input("Digite o valor que você deseja depositar?:"))
        if (deposito>0): # Verifica se o valor a ser depositado é positivo
            saldo,extrato=depositar(saldo,deposito,extrato)
            depositos_acumulados=depositos_acumulados+deposito
        else:   # Se o valor a ser depositado for negativo
            print("Valor de saque inválido. Tente novamente!")
        
        
    elif opcao == "s":
        print("Saque")
        saque = float((input("Quanto você deseja sacar?:")))
        saldo,extrato = sacar(saldo=saldo,valor=saque,extrato=extrato,limite=limite,numero_saques=numero_saques,limite_saques =LIMITE_SAQUES)
        
    
    elif opcao == "n":
        criar_usuario(usuarios=lista_usuarios)
                
    elif opcao == "c":
        numero_conta = len(contas)+1
        conta=criar_conta(AGENCIA,nro_conta,lista_usuarios)
        if conta:
            contas.append(conta)
            # numerro_conta +=1
 
    elif opcao == "lc":
        listar_contas(contas)
         
    elif opcao == "e":
        print_extrato(saldo,extrato=extrato)        
        
    elif opcao == "q":
        print("\n\nEncerrando...\n O Banco " " agradece a sua preferência!\n\n")
        break
    else:
        print("Operação Inválida! Por favor selecione novamente a operação desejada")
****************************************************************************

3-Sistema bancario_3.py
from sistema_bancario_poo import *


main()
****************************************************
4- Sistema_bancario_poo.py
from abc import ABC, abstractclassmethod,abstractproperty
from datetime import datetime
import textwrap


class Cliente:
    def __init__(self,endereco):
        self.endereco = endereco
        self.contas = []
    
    def realizar_transacao(self,conta,transacao):
        transacao.registrar(conta)
    
    def adicionar_conta(self,conta):
        self.contas.append(conta)
    
class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf
    
    
class Conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = Historico()
        
    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)
    
    @property
    def saldo(self):
        return self._saldo
    
    @property
    def numero(self):
        return self._numero
    
    @property
    def agencia(self):
        return self._agencia
    
    @property
    def cliente(self):
        return self._cliente
    
    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        saldo = self._saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            print("\r ### Operação Falhou! Você não tem saldo suficiente! ### ")
        
        elif valor>0:
            
            self._saldo -= valor
            print("\n $$$ Saque realizado! $$$")
            
            return True
        
        else:
            print("\n---- Operação Falhou! O valor do saque é invalido! ----")

        return False
            
    def depositar(self, valor):
        
        if valor>0:
            self._saldo += valor
            print("\n ++++ Déposito realizado com sucesso! ++++")
        
        else:
            print("\n **** Valor de depósito inválido! ****")
            return False
        
        return True
                                

class ContaCorrente(Conta):
    
    def __init__(self, numero, cliente, limite = 800, limite_saques = 3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques
        
    def sacar(self, valor):
        numero_saques = len([transacao for transacao in self.historico.transacoes if transacao["tipo"] ==Saque.__name__])
        
        excedeu_limite = valor>self.limite
        excedeu_saques = numero_saques>=self.limite_saques
        
        if excedeu_limite:
            print("\n >>>>> Valor do saque excedeu o limite!! <<<<<")
        
        elif excedeu_saques:
            print("\n <<<<< Numero máximo de saques permitido! >>>>>")
        
        else:
            return super().sacar(valor)
        
        return False
    
    def __str__(self):
        return f"""\
            Agência:\t{self.agencia}
            C/C:\t\t{self.numero}
            Titular:\t{self.cliente.nome}
            """
    

class Historico:
    
    def __init__(self):
        self._transacoes = []
    
    @property
    def transacoes(self):
        return self._transacoes
    
    def adicionar_transacao(self,transacao):
        
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
                "data": datetime.now().strftime("%d-%m-%Y %H:%M:%S"),
                      
            }
        )
        
    
    
class Transacao(ABC):
    @property
    @abstractproperty
    def valor(self):
        pass
    
    @abstractclassmethod
    def registrar(self, conta):
        pass
    
    
class Saque(Transacao):
    
    def __init__(self,valor):
        self._valor = valor 
            
    @property
    def valor(self):
        return self._valor
    
    def registrar(self,conta):
        sucesso_transacao = conta.sacar(self.valor)
        
        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

    
class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor
        
    @property
    def valor(self):
        return self._valor
        
    def registrar(self,conta):
        sucesso_transacao = conta.depositar(self.valor)
            
        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)
                

def tela_inicial():
    
    menu = """\n
    
    ****************** BEM VINDO AO SEU BANK ******************
    ********** AQUI SEU SALDO SERÁ SEMPRE UMA SURPRESA! **********
    
    [1]\t Realizar Depósito
    [2]\t Realizar Saque
    [3]\t Imprimir extrato
    [4]\t Abrir nova conta
    [5]\t Listar contas
    [6]\t Cadastrar novo usuário
    [s]\t Sair
    
    >>>>>>    """
    return input(textwrap.dedent(menu))




def filtrar_cliente(cpf,clientes):
    
    clientes_filtrados = [cliente for cliente in clientes if cliente.cpf==cpf]
    return clientes_filtrados[0] if clientes_filtrados else None


def recuperar_conta_cliente(cliente):
    
    if not cliente.contas:
        print("\n ----- Cliente não possui conta! -----")
        return
    
    # FIXME: não permite cliente escolher a conta
    return cliente.contas[0]
    
    
def sacar(clientes):
    cpf = input("Informe o CPF do cliente: ")
    
    cliente = filtrar_cliente(cpf,clientes)
    
    if not cliente:
        print("\n ----- Cliente não encontrado! -----")
        return
    
    valor = float(input("Digite o valor do saque: "))
    transacao = Saque(valor)
    
    conta = recuperar_conta_cliente(cliente)
    
    if not conta:
        return 
    
    cliente.realizar_transacao(conta,transacao)


def exibir_extrato(clientes):
    cpf = input("Digite o CPF do cliente: ")
    
    cliente = filtrar_cliente(cpf,clientes)
    
    if not cliente:
        print("\n ----- Cliente não encontrado! -----")
        return
    
    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return
    
    print("\n **************** EXTRATO ****************")
    transacoes = conta.historico.transacoes
    
    extrato = ""
    if not transacoes:
        extrato = "Não foram realizadas transações na conta!"
    
    else:
        for transacao in transacoes:
            extrato += f"\n{transacao['tipo']}: \n\tR${transacao['valor']:.2f}"
    
    print(extrato)
    print(f"\nSaldo: \n\tR${conta.saldo:.2f}")
    print("====================================================")


def criar_conta(numero_conta,clientes,contas):
    cpf = input("Digite o CPF do cliente: ")
    cliente = filtrar_cliente(cpf,clientes)
    
    if not cliente:
        print("\n ----- Cliente não encontrado! Fluxo de criação de contas encerrado! -----")
        return
    
    conta=ContaCorrente.nova_conta(cliente = cliente,numero=numero_conta)
    contas.append(conta)
    cliente.contas.append(conta)
    print("\n --- Conta criada com sucesso! ---")


def listar_contas(contas):
    for conta in contas:
        print("="*100)
        print(textwrap.dedent(str(conta)))
    
    
def criar_cliente(clientes):
    cpf = input("Digite o CPF do cliente: ")
    
    cliente = filtrar_cliente(cpf,clientes)
    
    if cliente:
        print("\n ----- CPF já existente! -----")
        return
    nome = input("Digite o nome completo do cliente: ")
    data_nascimento = input("Digite a data de nascimento do cliente (dd-mm-aaaa): ")
    endereco = input("Digite o endereço do cliente (Logradouro, numero - bairro - cidade/sigla estado): ")
    
    cliente=PessoaFisica(nome = nome, data_nascimento=data_nascimento, cpf=cpf, endereco=endereco)
    clientes.append(cliente)
    print("\n ************ Cliente criado com sucesso! ************")
    

def depositar(clientes):
    cpf = input("Digite o CPF do cliente: ")
    cliente = filtrar_cliente(cpf,clientes)
    
    if not cliente:
        print("\n ----- Cliente não encontrado! ------")
        return
    
    valor = float(input("Digite o valor do depósito: "))
    transacao = Deposito(valor)
    
    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return
    
    cliente.realizar_transacao(conta,transacao)

    
def main():
    clientes=[]
    contas=[]
    
    while True:
        
        opcao = tela_inicial()
        
        if opcao == "1":
            depositar(clientes)
        
        elif opcao == "2":
            sacar(clientes)
            
        elif opcao == "3":
            exibir_extrato(clientes)
        
        elif opcao == "4":
            numero_conta=len(contas)+1
            criar_conta(numero_conta,clientes,contas)
        
        elif opcao == "5":
            listar_contas(contas)
            
        elif opcao == "6":
            criar_cliente(clientes)
        
        elif opcao =="s":
            break
